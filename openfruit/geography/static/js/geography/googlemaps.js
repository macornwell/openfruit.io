// Generated by CoffeeScript 1.10.0
(function() {
  var GoogleMaps, LatLon, ref, ref1, root,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.openfruit = (ref = root.openfruit) != null ? ref : {};

  root.openfruit.geography = (ref1 = root.openfruit.geography) != null ? ref1 : {};

  LatLon = (function() {
    function LatLon(lat, lon) {
      this.lat = lat;
      this.lon = lon;
      this.getLatLon = bind(this.getLatLon, this);
    }

    LatLon.prototype.getLatLon = function() {
      return {
        lat: this.lat,
        lng: this.lon
      };
    };

    return LatLon;

  })();

  GoogleMaps = (function() {
    function GoogleMaps(mapID, centerLatLon, zoom, shouldCluster) {
      if (shouldCluster == null) {
        shouldCluster = true;
      }
      this.addMarker = bind(this.addMarker, this);
      this._shouldCluster = shouldCluster;
      this._map = new google.maps.Map(document.getElementById(mapID), {
        zoom: zoom,
        mapTypeId: 'hybrid',
        center: centerLatLon,
        styles: [
          {
            featureType: 'poi.business',
            stylers: [
              {
                visibility: 'off'
              }
            ]
          }, {
            featureType: 'transit',
            elementType: 'labels.icon',
            stylers: [
              {
                visibility: 'off'
              }
            ]
          }
        ]
      });
      this._markers = [];
      this._markerCluster = new MarkerClusterer(this._map, this._markers, {
        imagePath: 'https://cdn.rawgit.com/googlemaps/js-marker-clusterer/gh-pages/images/m',
        maxZoom: 18
      });
      setTimeout(((function(_this) {
        return function() {
          return google.maps.event.trigger(_this._map, 'resize');
        };
      })(this)), 1000);
    }

    GoogleMaps.prototype.addMarker = function(position, title, additionalDict, addToCluster) {
      var data, key, marker, value;
      if (additionalDict == null) {
        additionalDict = {};
      }
      if (addToCluster == null) {
        addToCluster = true;
      }
      data = {
        position: position,
        map: this._map,
        title: title
      };
      for (key in additionalDict) {
        value = additionalDict[key];
        data[key] = value;
      }
      marker = new google.maps.Marker(data);
      this._markers.push(marker);
      if (this._shouldCluster && addToCluster) {
        this._markerCluster.addMarker(marker, true);
      }
      return marker;
    };

    return GoogleMaps;

  })();

  root.openfruit.geography.LatLon = LatLon;

  root.openfruit.geography.GoogleMaps = GoogleMaps;

}).call(this);

//# sourceMappingURL=googlemaps.js.map
